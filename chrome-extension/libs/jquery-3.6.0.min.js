// jQuery 3.6.0 Minimal Implementation for Empresas Web CRM
// This is a simplified implementation for basic functionality

window.$ = window.jQuery = (function() {
  function jQuery(selector) {
    if (typeof selector === 'string') {
      return new jQuery.fn.init(document.querySelectorAll(selector));
    } else if (selector && selector.nodeType) {
      return new jQuery.fn.init([selector]);
    } else if (typeof selector === 'function') {
      // DOM ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', selector);
      } else {
        selector();
      }
      return this;
    }
    return new jQuery.fn.init([]);
  }

  jQuery.fn = jQuery.prototype = {
    constructor: jQuery,
    length: 0,

    init: function(elements) {
      if (elements && elements.length) {
        for (let i = 0; i < elements.length; i++) {
          this[i] = elements[i];
        }
        this.length = elements.length;
      }
      return this;
    },

    each: function(callback) {
      for (let i = 0; i < this.length; i++) {
        callback.call(this[i], i, this[i]);
      }
      return this;
    },

    on: function(event, handler) {
      return this.each(function() {
        this.addEventListener(event, handler);
      });
    },

    off: function(event, handler) {
      return this.each(function() {
        this.removeEventListener(event, handler);
      });
    },

    click: function(handler) {
      if (handler) {
        return this.on('click', handler);
      } else {
        return this.each(function() {
          this.click();
        });
      }
    },

    addClass: function(className) {
      return this.each(function() {
        this.classList.add(className);
      });
    },

    removeClass: function(className) {
      return this.each(function() {
        this.classList.remove(className);
      });
    },

    toggleClass: function(className) {
      return this.each(function() {
        this.classList.toggle(className);
      });
    },

    hasClass: function(className) {
      return this.length > 0 && this[0].classList.contains(className);
    },

    attr: function(name, value) {
      if (value === undefined) {
        return this.length > 0 ? this[0].getAttribute(name) : undefined;
      }
      return this.each(function() {
        this.setAttribute(name, value);
      });
    },

    removeAttr: function(name) {
      return this.each(function() {
        this.removeAttribute(name);
      });
    },

    val: function(value) {
      if (value === undefined) {
        return this.length > 0 ? this[0].value : undefined;
      }
      return this.each(function() {
        this.value = value;
      });
    },

    text: function(content) {
      if (content === undefined) {
        return this.length > 0 ? this[0].textContent : '';
      }
      return this.each(function() {
        this.textContent = content;
      });
    },

    html: function(content) {
      if (content === undefined) {
        return this.length > 0 ? this[0].innerHTML : '';
      }
      return this.each(function() {
        this.innerHTML = content;
      });
    },

    css: function(property, value) {
      if (typeof property === 'object') {
        return this.each(function() {
          Object.assign(this.style, property);
        });
      }
      if (value === undefined) {
        return this.length > 0 ? getComputedStyle(this[0])[property] : undefined;
      }
      return this.each(function() {
        this.style[property] = value;
      });
    },

    show: function() {
      return this.css('display', 'block');
    },

    hide: function() {
      return this.css('display', 'none');
    },

    toggle: function() {
      return this.each(function() {
        const isHidden = getComputedStyle(this).display === 'none';
        this.style.display = isHidden ? 'block' : 'none';
      });
    },

    append: function(content) {
      return this.each(function() {
        if (typeof content === 'string') {
          this.insertAdjacentHTML('beforeend', content);
        } else {
          this.appendChild(content);
        }
      });
    },

    prepend: function(content) {
      return this.each(function() {
        if (typeof content === 'string') {
          this.insertAdjacentHTML('afterbegin', content);
        } else {
          this.insertBefore(content, this.firstChild);
        }
      });
    },

    remove: function() {
      return this.each(function() {
        if (this.parentNode) {
          this.parentNode.removeChild(this);
        }
      });
    },

    find: function(selector) {
      const elements = [];
      this.each(function() {
        const found = this.querySelectorAll(selector);
        elements.push(...found);
      });
      return new jQuery.fn.init(elements);
    },

    parent: function() {
      const parents = [];
      this.each(function() {
        if (this.parentNode && this.parentNode.nodeType === 1) {
          parents.push(this.parentNode);
        }
      });
      return new jQuery.fn.init(parents);
    },

    closest: function(selector) {
      const elements = [];
      this.each(function() {
        let current = this;
        while (current && current.nodeType === 1) {
          if (current.matches(selector)) {
            elements.push(current);
            break;
          }
          current = current.parentNode;
        }
      });
      return new jQuery.fn.init(elements);
    },

    data: function(key, value) {
      if (value === undefined) {
        return this.length > 0 ? this[0].dataset[key] : undefined;
      }
      return this.each(function() {
        this.dataset[key] = value;
      });
    },

    fadeIn: function(duration = 400) {
      return this.each(function() {
        this.style.opacity = '0';
        this.style.display = 'block';
        
        const start = Date.now();
        const fade = () => {
          const elapsed = Date.now() - start;
          const progress = Math.min(elapsed / duration, 1);
          this.style.opacity = progress;
          
          if (progress < 1) {
            requestAnimationFrame(fade);
          }
        };
        requestAnimationFrame(fade);
      });
    },

    fadeOut: function(duration = 400) {
      return this.each(function() {
        const start = Date.now();
        const initialOpacity = parseFloat(getComputedStyle(this).opacity) || 1;
        
        const fade = () => {
          const elapsed = Date.now() - start;
          const progress = Math.min(elapsed / duration, 1);
          this.style.opacity = initialOpacity * (1 - progress);
          
          if (progress < 1) {
            requestAnimationFrame(fade);
          } else {
            this.style.display = 'none';
          }
        };
        requestAnimationFrame(fade);
      });
    }
  };

  // Static methods
  jQuery.extend = function(target, ...sources) {
    sources.forEach(source => {
      Object.keys(source).forEach(key => {
        target[key] = source[key];
      });
    });
    return target;
  };

  jQuery.ajax = function(options) {
    const settings = jQuery.extend({
      url: '',
      method: 'GET',
      data: null,
      contentType: 'application/json',
      dataType: 'json',
      success: function() {},
      error: function() {}
    }, options);

    return fetch(settings.url, {
      method: settings.method,
      headers: {
        'Content-Type': settings.contentType
      },
      body: settings.data ? JSON.stringify(settings.data) : null
    }).then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return settings.dataType === 'json' ? response.json() : response.text();
    }).then(data => {
      settings.success(data);
    }).catch(error => {
      settings.error(error);
    });
  };

  jQuery.get = function(url, success) {
    return jQuery.ajax({
      url: url,
      method: 'GET',
      success: success
    });
  };

  jQuery.post = function(url, data, success) {
    return jQuery.ajax({
      url: url,
      method: 'POST',
      data: data,
      success: success
    });
  };

  // Initialize prototype
  jQuery.fn.init.prototype = jQuery.fn;

  return jQuery;
})();

// Document ready shorthand
window.$(document).ready = function(callback) {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', callback);
  } else {
    callback();
  }
};

console.log('âœ… jQuery minimal implementation loaded for Empresas Web CRM');