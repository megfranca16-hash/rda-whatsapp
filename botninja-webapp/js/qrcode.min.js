// QRCode.js Simple Implementation
// Simplified QR Code generator for BotNinja

window.QRCode = {
  toCanvas: function(canvas, text, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    
    options = options || {};
    const width = options.width || 256;
    const margin = options.margin || 4;
    
    try {
      // Simple QR Code simulation - in production use proper QR library
      const ctx = canvas.getContext('2d');
      canvas.width = width;
      canvas.height = width;
      
      // Background
      ctx.fillStyle = options.color?.light || '#FFFFFF';
      ctx.fillRect(0, 0, width, width);
      
      // Generate pattern (simplified)
      ctx.fillStyle = options.color?.dark || '#000000';
      
      const moduleSize = Math.floor((width - margin * 2) / 25);
      const offset = margin;
      
      // Create QR-like pattern
      for (let i = 0; i < 25; i++) {
        for (let j = 0; j < 25; j++) {
          // Simulate QR code pattern based on text hash
          const hash = this.simpleHash(text + i + j);
          if (hash % 3 === 0) {
            ctx.fillRect(
              offset + i * moduleSize,
              offset + j * moduleSize,
              moduleSize - 1,
              moduleSize - 1
            );
          }
        }
      }
      
      // Add finder patterns (corners)
      this.drawFinderPattern(ctx, offset, offset, moduleSize);
      this.drawFinderPattern(ctx, offset + 18 * moduleSize, offset, moduleSize);
      this.drawFinderPattern(ctx, offset, offset + 18 * moduleSize, moduleSize);
      
      if (callback) callback(null);
      
    } catch (error) {
      if (callback) callback(error);
    }
  },
  
  simpleHash: function(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return Math.abs(hash);
  },
  
  drawFinderPattern: function(ctx, x, y, moduleSize) {
    // Outer 7x7 square
    ctx.fillRect(x, y, 7 * moduleSize, 7 * moduleSize);
    
    // Inner white 5x5 square
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(x + moduleSize, y + moduleSize, 5 * moduleSize, 5 * moduleSize);
    
    // Inner black 3x3 square
    ctx.fillStyle = '#000000';
    ctx.fillRect(x + 2 * moduleSize, y + 2 * moduleSize, 3 * moduleSize, 3 * moduleSize);
  }
};