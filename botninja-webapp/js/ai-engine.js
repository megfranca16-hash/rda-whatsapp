// BotNinja AI Engine
// Sistema de Intelig√™ncia Artificial para conversas automatizadas

class AIEngine {
  constructor() {
    this.isInitialized = false;
    this.activeBot = null;
    this.conversationContext = new Map();
    this.knowledgeBase = new Map();
    this.responsePatterns = new Map();
    this.metrics = {
      totalResponses: 0,
      successfulQualifications: 0,
      scheduledMeetings: 0,
      conversions: 0
    };
    
    this.initializeAI();
  }

  // Inicializar sistema de IA
  async initializeAI() {
    try {
      console.log('üß† Inicializando BotNinja AI Engine...');
      
      // Carregar configura√ß√£o e bot ativo
      await this.loadActiveBot();
      
      // Inicializar base de conhecimento padr√£o
      this.initializeKnowledgeBase();
      
      // Inicializar padr√µes de resposta
      this.initializeResponsePatterns();
      
      // Configurar event listeners
      this.setupEventListeners();
      
      this.isInitialized = true;
      console.log('‚úÖ AI Engine inicializado com sucesso');
      
    } catch (error) {
      console.error('‚ùå Erro ao inicializar AI Engine:', error);
    }
  }

  // Carregar bot ativo
  async loadActiveBot() {
    const config = await window.BotNinjaStorage.getConfig();
    
    if (config.activeBot && config.bots[config.activeBot]) {
      this.activeBot = config.bots[config.activeBot];
      console.log(`ü§ñ Bot ativo carregado: ${this.activeBot.name}`);
    } else {
      // Criar bot padr√£o se n√£o existir
      const botId = await this.createDefaultBot();
      await window.BotNinjaStorage.switchActiveBot(botId);
      await this.loadActiveBot();
    }
  }

  // Criar bot padr√£o
  async createDefaultBot() {
    return await window.BotNinjaStorage.createBot({
      name: 'IA Personalizada',
      description: 'Assistente inteligente para WhatsApp'
    });
  }

  // Inicializar base de conhecimento
  initializeKnowledgeBase() {
    const defaultKnowledge = [
      {
        category: 'saudacao',
        keywords: ['oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite', 'hey', 'e a√≠'],
        responses: [
          'Ol√°! üëã Sou a IA do BotNinja. Como posso ajudar voc√™ hoje?',
          'Oi! üòä √â um prazer falar com voc√™. Em que posso ser √∫til?',
          'Ol√°! Bem-vindo(a)! Estou aqui para ajudar. O que voc√™ precisa?'
        ]
      },
      {
        category: 'servicos',
        keywords: ['servi√ßo', 'servi√ßos', 'produto', 'produtos', 'oferece', 'fazem', 'trabalham'],
        responses: [
          'Oferecemos solu√ß√µes de automa√ß√£o com IA para WhatsApp! ü§ñ\n\n‚Ä¢ Atendimento autom√°tico 24/7\n‚Ä¢ Qualifica√ß√£o de leads\n‚Ä¢ Agendamento autom√°tico\n‚Ä¢ Disparo em massa\n\nGostaria de saber mais sobre algum desses servi√ßos?',
          'Nossa especialidade √© transformar seu WhatsApp em uma m√°quina de vendas! üöÄ\n\nCom nossa IA voc√™ pode:\n‚úÖ Atender clientes automaticamente\n‚úÖ Qualificar leads inteligentemente\n‚úÖ Agendar reuni√µes sem interven√ß√£o\n‚úÖ Fazer campanhas segmentadas\n\nQual te interessa mais?'
        ]
      },
      {
        category: 'preco',
        keywords: ['pre√ßo', 'preco', 'valor', 'custa', 'investimento', 'plano', 'planos'],
        responses: [
          'Nossos planos s√£o super acess√≠veis! üí∞\n\nüìã **Plano Starter**: R$ 197/m√™s\nüöÄ **Plano Profissional**: R$ 297/m√™s\n‚≠ê **Plano Empresarial**: R$ 497/m√™s\n\nTodos incluem:\n‚Ä¢ IA treinada para seu neg√≥cio\n‚Ä¢ Suporte completo\n‚Ä¢ Resultados garantidos\n\nQual plano faz mais sentido para voc√™?',
          'Temos op√ß√µes para todos os tamanhos de neg√≥cio! üìä\n\nDesde R$ 197/m√™s voc√™ j√° pode:\n‚úÖ Automatizar seu atendimento\n‚úÖ Qualificar leads 24/7\n‚úÖ Aumentar suas vendas\n\nQuer que eu te ajude a escolher o plano ideal?'
        ]
      },
      {
        category: 'agendamento',
        keywords: ['agendar', 'reuni√£o', 'reuniao', 'conversar', 'demonstra√ß√£o', 'demo', 'apresenta√ß√£o'],
        responses: [
          'Perfeito! Vou agendar uma demonstra√ß√£o personalizada para voc√™! üìÖ\n\nPreciso de algumas informa√ß√µes:\n\n1Ô∏è‚É£ Qual o melhor dia da semana?\n2Ô∏è‚É£ Prefere manh√£ ou tarde?\n3Ô∏è‚É£ Qual seu WhatsApp para confirmar?\n\nEm 30 minutos voc√™ vai ver como nossa IA pode revolucionar seu neg√≥cio!',
          '√ìtima escolha! üéØ\n\nVamos agendar uma conversa exclusiva onde voc√™ vai ver:\n‚Ä¢ Como funciona na pr√°tica\n‚Ä¢ Resultados de outros clientes\n‚Ä¢ Configura√ß√£o personalizada\n\nMe fala qual o melhor hor√°rio para voc√™ esta semana?'
        ]
      },
      {
        category: 'despedida',
        keywords: ['tchau', 'obrigado', 'obrigada', 'valeu', 'at√© logo', 'bye', 'falou'],
        responses: [
          'Foi um prazer ajudar! üòä Estou sempre aqui quando precisar. Tenha um √≥timo dia! üåü',
          'Obrigado pelo contato! üôè Qualquer d√∫vida, √© s√≥ chamar. Sucesso sempre! üöÄ',
          'At√© breve! üëã Lembre-se: nossa IA est√° sempre pronta para ajudar seus clientes 24/7! ü§ñ'
        ]
      },
      {
        category: 'duvida',
        keywords: ['n√£o entendi', 'nao entendi', 'como assim', 'explica', 'd√∫vida', 'duvida'],
        responses: [
          'Claro! Deixe-me explicar melhor... üí°\n\nO BotNinja √© uma IA que:\n‚Ä¢ Responde seus clientes automaticamente\n‚Ä¢ Qualifica quem realmente tem interesse\n‚Ä¢ Agenda reuni√µes sozinha\n‚Ä¢ Funciona 24 horas por dia\n\n√â como ter um vendedor que nunca dorme! üò¥\n\nFicou mais claro? Quer que eu detalhe alguma parte?',
          'Sem problemas! Vou ser mais espec√≠fico... üéØ\n\nImagine que voc√™ est√° dormindo e um cliente manda mensagem √†s 2h da manh√£. Nossa IA:\n\n1Ô∏è‚É£ Responde na hora\n2Ô∏è‚É£ Descobre o que ele quer\n3Ô∏è‚É£ Agenda uma reuni√£o\n4Ô∏è‚É£ Te entrega o lead qualificado\n\nTudo autom√°tico! Entendeu a m√°gica? ‚ú®'
        ]
      }
    ];

    defaultKnowledge.forEach(knowledge => {
      this.knowledgeBase.set(knowledge.category, knowledge);
    });
  }

  // Inicializar padr√µes de resposta
  initializeResponsePatterns() {
    const patterns = [
      {
        pattern: /\b(oi|ol√°|ola|hey|e a√≠)\b/i,
        category: 'saudacao',
        confidence: 0.9
      },
      {
        pattern: /\b(pre√ßo|preco|valor|custa|investimento|plano)\b/i,
        category: 'preco',
        confidence: 0.8
      },
      {
        pattern: /\b(agendar|reuni√£o|reuniao|demo|demonstra√ß√£o)\b/i,
        category: 'agendamento',
        confidence: 0.85
      },
      {
        pattern: /\b(servi√ßo|servi√ßos|produto|produtos|oferece)\b/i,
        category: 'servicos',
        confidence: 0.8
      },
      {
        pattern: /\b(tchau|obrigado|obrigada|valeu|at√© logo)\b/i,
        category: 'despedida',
        confidence: 0.9
      },
      {
        pattern: /\b(n√£o entendi|nao entendi|como assim|explica|d√∫vida|duvida)\b/i,
        category: 'duvida',
        confidence: 0.7
      }
    ];

    patterns.forEach((pattern, index) => {
      this.responsePatterns.set(`pattern_${index}`, pattern);
    });
  }

  // Configurar event listeners
  setupEventListeners() {
    // Escutar mensagens do WhatsApp
    window.addEventListener('whatsapp:message:received', (event) => {
      this.handleIncomingMessage(event.detail);
    });

    // Escutar mudan√ßas de bot
    window.addEventListener('botninja:storage:changed', (event) => {
      if (event.detail.key === 'botChanged') {
        this.loadActiveBot();
      }
    });
  }

  // Processar mensagem recebida
  async handleIncomingMessage(messageData) {
    if (!this.isInitialized || !this.activeBot) {
      console.log('IA n√£o est√° pronta para processar mensagens');
      return;
    }

    try {
      console.log('üß† Processando mensagem:', messageData);

      // Gerar resposta da IA
      const response = await this.generateResponse(messageData);

      // Simular delay humano
      await this.simulateTyping(1000 + Math.random() * 2000);

      // Enviar resposta
      if (response) {
        await this.sendResponse(messageData.from, response);
        
        // Atualizar m√©tricas
        this.updateMetrics('response_sent');
        
        // Salvar contexto da conversa
        await this.saveConversationContext(messageData.from, messageData, response);
      }

    } catch (error) {
      console.error('Erro ao processar mensagem:', error);
    }
  }

  // Gerar resposta inteligente
  async generateResponse(messageData) {
    const message = messageData.message.toLowerCase();
    const phoneNumber = messageData.from;

    // Obter contexto da conversa
    const context = this.getConversationContext(phoneNumber);
    
    // Analisar intent da mensagem
    const intent = this.analyzeIntent(message);
    
    // Gerar resposta baseada no intent
    let response = this.generateResponseFromIntent(intent, context);
    
    // Personalizar resposta se necess√°rio
    response = this.personalizeResponse(response, context);
    
    // Log da IA
    console.log(`üéØ Intent detectado: ${intent.category} (${intent.confidence})`);
    console.log(`üí¨ Resposta gerada: ${response.substring(0, 50)}...`);
    
    return response;
  }

  // Analisar inten√ß√£o da mensagem
  analyzeIntent(message) {
    let bestMatch = { category: 'default', confidence: 0 };
    
    // Verificar padr√µes conhecidos
    for (const [key, pattern] of this.responsePatterns) {
      if (pattern.pattern.test(message)) {
        if (pattern.confidence > bestMatch.confidence) {
          bestMatch = {
            category: pattern.category,
            confidence: pattern.confidence
          };
        }
      }
    }
    
    // Se n√£o encontrou padr√£o espec√≠fico, usar an√°lise de palavras-chave
    if (bestMatch.confidence < 0.5) {
      bestMatch = this.analyzeKeywords(message);
    }
    
    return bestMatch;
  }

  // Analisar palavras-chave
  analyzeKeywords(message) {
    let bestMatch = { category: 'default', confidence: 0 };
    
    for (const [category, knowledge] of this.knowledgeBase) {
      let matchCount = 0;
      
      knowledge.keywords.forEach(keyword => {
        if (message.includes(keyword)) {
          matchCount++;
        }
      });
      
      const confidence = matchCount / knowledge.keywords.length;
      
      if (confidence > bestMatch.confidence) {
        bestMatch = { category, confidence };
      }
    }
    
    return bestMatch;
  }

  // Gerar resposta baseada no intent
  generateResponseFromIntent(intent, context) {
    const knowledge = this.knowledgeBase.get(intent.category);
    
    if (knowledge && knowledge.responses.length > 0) {
      // Escolher resposta aleat√≥ria da categoria
      const randomIndex = Math.floor(Math.random() * knowledge.responses.length);
      return knowledge.responses[randomIndex];
    }
    
    // Resposta padr√£o se n√£o encontrou categoria espec√≠fica
    return this.getDefaultResponse(context);
  }

  // Obter resposta padr√£o
  getDefaultResponse(context) {
    const defaultResponses = [
      'Interessante! ü§î Me conta mais sobre isso. Como posso ajudar voc√™ especificamente?',
      'Entendi! üëç Vou ajudar voc√™ da melhor forma. Pode me dar mais detalhes sobre o que precisa?',
      'Perfeito! üéØ Para te ajudar melhor, me fala qual √© sua principal necessidade no momento?',
      'Que legal! üòä Estou aqui para resolver sua demanda. O que voc√™ gostaria de saber sobre nossos servi√ßos?'
    ];
    
    const randomIndex = Math.floor(Math.random() * defaultResponses.length);
    return defaultResponses[randomIndex];
  }

  // Personalizar resposta
  personalizeResponse(response, context) {
    // Adicionar nome se dispon√≠vel
    if (context && context.name) {
      response = response.replace(/voc√™/g, context.name);
    }
    
    // Adicionar contexto de conversa anterior se relevante
    if (context && context.lastCategory) {
      // L√≥gica para personalizar baseado no hist√≥rico
    }
    
    return response;
  }

  // Obter contexto da conversa
  getConversationContext(phoneNumber) {
    return this.conversationContext.get(phoneNumber) || {
      messages: [],
      name: null,
      lastCategory: null,
      stage: 'initial',
      interests: []
    };
  }

  // Salvar contexto da conversa
  async saveConversationContext(phoneNumber, incomingMessage, response) {
    let context = this.getConversationContext(phoneNumber);
    
    // Atualizar contexto
    context.messages.push({
      timestamp: new Date().toISOString(),
      incoming: incomingMessage.message,
      response: response,
      intent: this.analyzeIntent(incomingMessage.message.toLowerCase())
    });
    
    // Manter apenas √∫ltimas 10 mensagens
    if (context.messages.length > 10) {
      context.messages = context.messages.slice(-10);
    }
    
    // Salvar contexto
    this.conversationContext.set(phoneNumber, context);
    
    // Salvar no storage permanente
    await window.BotNinjaStorage.saveConversationData(phoneNumber, context);
  }

  // Simular digita√ß√£o
  async simulateTyping(duration) {
    return new Promise(resolve => {
      setTimeout(resolve, duration);
    });
  }

  // Enviar resposta
  async sendResponse(phoneNumber, message) {
    try {
      // Usar WhatsApp Manager para enviar
      const result = await window.WhatsAppManager.sendMessage(phoneNumber, message);
      console.log('‚úÖ Resposta enviada:', result);
      return result;
    } catch (error) {
      console.error('‚ùå Erro ao enviar resposta:', error);
      throw error;
    }
  }

  // Atualizar m√©tricas
  async updateMetrics(action) {
    switch (action) {
      case 'response_sent':
        this.metrics.totalResponses++;
        break;
      case 'lead_qualified':
        this.metrics.successfulQualifications++;
        break;
      case 'meeting_scheduled':
        this.metrics.scheduledMeetings++;
        break;
      case 'conversion':
        this.metrics.conversions++;
        break;
    }
    
    // Salvar m√©tricas
    await window.BotNinjaStorage.updateAIMetrics(this.metrics);
    
    // Disparar evento de atualiza√ß√£o de m√©tricas
    const event = new CustomEvent('ai:metrics:updated', {
      detail: this.metrics
    });
    window.dispatchEvent(event);
  }

  // Simular conversa (para demonstra√ß√£o)
  async simulateConversation(userMessage) {
    if (!this.isInitialized) {
      return 'IA n√£o est√° inicializada';
    }

    const simulatedMessage = {
      id: `sim_${Date.now()}`,
      from: 'simulator',
      message: userMessage,
      timestamp: new Date().toISOString(),
      type: 'text'
    };

    // Processar mensagem
    const response = await this.generateResponse(simulatedMessage);
    
    // Atualizar m√©tricas
    this.updateMetrics('response_sent');
    
    return response;
  }

  // Treinar IA com nova resposta
  async trainResponse(category, keywords, responses) {
    const knowledge = {
      category,
      keywords: Array.isArray(keywords) ? keywords : [keywords],
      responses: Array.isArray(responses) ? responses : [responses]
    };
    
    this.knowledgeBase.set(category, knowledge);
    
    // Salvar no storage
    const config = await window.BotNinjaStorage.getConfig();
    if (!config.bots[config.activeBot].settings.knowledgeBase.entries) {
      config.bots[config.activeBot].settings.knowledgeBase.entries = [];
    }
    
    config.bots[config.activeBot].settings.knowledgeBase.entries.push(knowledge);
    config.bots[config.activeBot].settings.knowledgeBase.lastUpdate = new Date().toISOString();
    
    await window.BotNinjaStorage.updateConfig(config);
    
    console.log(`‚úÖ IA treinada para categoria: ${category}`);
  }

  // Obter m√©tricas atuais
  getMetrics() {
    return { ...this.metrics };
  }

  // Verificar se IA est√° ativa
  isActive() {
    return this.isInitialized && this.activeBot && window.WhatsAppManager.isConnected();
  }
}

// Inst√¢ncia global do AI Engine
window.AIEngine = new AIEngine();